// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: Questions.proto

package questionspb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Yesno int32

const (
	Yesno_YESNOUNKNOWN  Yesno = 0
	Yesno_YESNONOTSETUP Yesno = 1
	Yesno_YES           Yesno = 2
	Yesno_NO            Yesno = 3
)

// Enum value maps for Yesno.
var (
	Yesno_name = map[int32]string{
		0: "YESNOUNKNOWN",
		1: "YESNONOTSETUP",
		2: "YES",
		3: "NO",
	}
	Yesno_value = map[string]int32{
		"YESNOUNKNOWN":  0,
		"YESNONOTSETUP": 1,
		"YES":           2,
		"NO":            3,
	}
)

func (x Yesno) Enum() *Yesno {
	p := new(Yesno)
	*p = x
	return p
}

func (x Yesno) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Yesno) Descriptor() protoreflect.EnumDescriptor {
	return file_Questions_proto_enumTypes[0].Descriptor()
}

func (Yesno) Type() protoreflect.EnumType {
	return &file_Questions_proto_enumTypes[0]
}

func (x Yesno) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Yesno.Descriptor instead.
func (Yesno) EnumDescriptor() ([]byte, []int) {
	return file_Questions_proto_rawDescGZIP(), []int{0}
}

type Secondtype int32

const (
	Secondtype_SECONDTYPEUNKNOWN  Secondtype = 0
	Secondtype_SECONDTYPENOTSETUP Secondtype = 1
	Secondtype_HIGH               Secondtype = 2
	Secondtype_LOW                Secondtype = 3
)

// Enum value maps for Secondtype.
var (
	Secondtype_name = map[int32]string{
		0: "SECONDTYPEUNKNOWN",
		1: "SECONDTYPENOTSETUP",
		2: "HIGH",
		3: "LOW",
	}
	Secondtype_value = map[string]int32{
		"SECONDTYPEUNKNOWN":  0,
		"SECONDTYPENOTSETUP": 1,
		"HIGH":               2,
		"LOW":                3,
	}
)

func (x Secondtype) Enum() *Secondtype {
	p := new(Secondtype)
	*p = x
	return p
}

func (x Secondtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Secondtype) Descriptor() protoreflect.EnumDescriptor {
	return file_Questions_proto_enumTypes[1].Descriptor()
}

func (Secondtype) Type() protoreflect.EnumType {
	return &file_Questions_proto_enumTypes[1]
}

func (x Secondtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Secondtype.Descriptor instead.
func (Secondtype) EnumDescriptor() ([]byte, []int) {
	return file_Questions_proto_rawDescGZIP(), []int{1}
}

type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId   string `protobuf:"bytes,1,opt,name=questionId,proto3" json:"questionId,omitempty"`
	QuestionDesc string `protobuf:"bytes,2,opt,name=questionDesc,proto3" json:"questionDesc,omitempty"`
	QuestionType string `protobuf:"bytes,3,opt,name=questionType,proto3" json:"questionType,omitempty"`
	// Types that are assignable to QuestionValidValues:
	//	*Question_QuestionYesNo
	//	*Question_QuestionSecondType
	QuestionValidValues isQuestion_QuestionValidValues `protobuf_oneof:"questionValidValues"`
	QuestionValid       string                         `protobuf:"bytes,6,opt,name=questionValid,proto3" json:"questionValid,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Questions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_Questions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_Questions_proto_rawDescGZIP(), []int{0}
}

func (x *Question) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *Question) GetQuestionDesc() string {
	if x != nil {
		return x.QuestionDesc
	}
	return ""
}

func (x *Question) GetQuestionType() string {
	if x != nil {
		return x.QuestionType
	}
	return ""
}

func (m *Question) GetQuestionValidValues() isQuestion_QuestionValidValues {
	if m != nil {
		return m.QuestionValidValues
	}
	return nil
}

func (x *Question) GetQuestionYesNo() Yesno {
	if x, ok := x.GetQuestionValidValues().(*Question_QuestionYesNo); ok {
		return x.QuestionYesNo
	}
	return Yesno_YESNOUNKNOWN
}

func (x *Question) GetQuestionSecondType() Secondtype {
	if x, ok := x.GetQuestionValidValues().(*Question_QuestionSecondType); ok {
		return x.QuestionSecondType
	}
	return Secondtype_SECONDTYPEUNKNOWN
}

func (x *Question) GetQuestionValid() string {
	if x != nil {
		return x.QuestionValid
	}
	return ""
}

type isQuestion_QuestionValidValues interface {
	isQuestion_QuestionValidValues()
}

type Question_QuestionYesNo struct {
	QuestionYesNo Yesno `protobuf:"varint,4,opt,name=questionYesNo,proto3,enum=questionnaire.Yesno,oneof"`
}

type Question_QuestionSecondType struct {
	QuestionSecondType Secondtype `protobuf:"varint,5,opt,name=questionSecondType,proto3,enum=questionnaire.Secondtype,oneof"`
}

func (*Question_QuestionYesNo) isQuestion_QuestionValidValues() {}

func (*Question_QuestionSecondType) isQuestion_QuestionValidValues() {}

type GetQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetQuestionsRequest) Reset() {
	*x = GetQuestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Questions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsRequest) ProtoMessage() {}

func (x *GetQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Questions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_Questions_proto_rawDescGZIP(), []int{1}
}

type GetQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionSlice []*Question `protobuf:"bytes,1,rep,name=questionSlice,proto3" json:"questionSlice,omitempty"`
}

func (x *GetQuestionsResponse) Reset() {
	*x = GetQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Questions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsResponse) ProtoMessage() {}

func (x *GetQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Questions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_Questions_proto_rawDescGZIP(), []int{2}
}

func (x *GetQuestionsResponse) GetQuestionSlice() []*Question {
	if x != nil {
		return x.QuestionSlice
	}
	return nil
}

type CreateQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CQuestion *Question `protobuf:"bytes,1,opt,name=cQuestion,proto3" json:"cQuestion,omitempty"`
}

func (x *CreateQuestionsRequest) Reset() {
	*x = CreateQuestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Questions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionsRequest) ProtoMessage() {}

func (x *CreateQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Questions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionsRequest.ProtoReflect.Descriptor instead.
func (*CreateQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_Questions_proto_rawDescGZIP(), []int{3}
}

func (x *CreateQuestionsRequest) GetCQuestion() *Question {
	if x != nil {
		return x.CQuestion
	}
	return nil
}

type CreateQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CQuestion *Question `protobuf:"bytes,1,opt,name=cQuestion,proto3" json:"cQuestion,omitempty"`
	Result    string    `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateQuestionsResponse) Reset() {
	*x = CreateQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Questions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionsResponse) ProtoMessage() {}

func (x *CreateQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Questions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionsResponse.ProtoReflect.Descriptor instead.
func (*CreateQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_Questions_proto_rawDescGZIP(), []int{4}
}

func (x *CreateQuestionsResponse) GetCQuestion() *Question {
	if x != nil {
		return x.CQuestion
	}
	return nil
}

func (x *CreateQuestionsResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type UpdateQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CQuestion *Question `protobuf:"bytes,1,opt,name=cQuestion,proto3" json:"cQuestion,omitempty"`
}

func (x *UpdateQuestionsRequest) Reset() {
	*x = UpdateQuestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Questions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionsRequest) ProtoMessage() {}

func (x *UpdateQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Questions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionsRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_Questions_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateQuestionsRequest) GetCQuestion() *Question {
	if x != nil {
		return x.CQuestion
	}
	return nil
}

type UpdateQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CQuestion *Question `protobuf:"bytes,1,opt,name=cQuestion,proto3" json:"cQuestion,omitempty"`
	Result    string    `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateQuestionsResponse) Reset() {
	*x = UpdateQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Questions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionsResponse) ProtoMessage() {}

func (x *UpdateQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Questions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionsResponse.ProtoReflect.Descriptor instead.
func (*UpdateQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_Questions_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateQuestionsResponse) GetCQuestion() *Question {
	if x != nil {
		return x.CQuestion
	}
	return nil
}

func (x *UpdateQuestionsResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_Questions_proto protoreflect.FileDescriptor

var file_Questions_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x22, 0xba, 0x02, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x79, 0x65, 0x73,
	0x6e, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x12, 0x4b, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x74, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x12, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x15, 0x0a,
	0x13, 0x67, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x4f, 0x0a, 0x16, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x63, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x17,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4f, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x09, 0x63, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x63, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2a, 0x3d, 0x0a, 0x05, 0x79, 0x65, 0x73, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x0c, 0x59, 0x45,
	0x53, 0x4e, 0x4f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x59, 0x45, 0x53, 0x4e, 0x4f, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x03,
	0x2a, 0x4e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x03,
	0x32, 0xb4, 0x02, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x25, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Questions_proto_rawDescOnce sync.Once
	file_Questions_proto_rawDescData = file_Questions_proto_rawDesc
)

func file_Questions_proto_rawDescGZIP() []byte {
	file_Questions_proto_rawDescOnce.Do(func() {
		file_Questions_proto_rawDescData = protoimpl.X.CompressGZIP(file_Questions_proto_rawDescData)
	})
	return file_Questions_proto_rawDescData
}

var file_Questions_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_Questions_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_Questions_proto_goTypes = []interface{}{
	(Yesno)(0),                      // 0: questionnaire.yesno
	(Secondtype)(0),                 // 1: questionnaire.secondtype
	(*Question)(nil),                // 2: questionnaire.question
	(*GetQuestionsRequest)(nil),     // 3: questionnaire.getQuestionsRequest
	(*GetQuestionsResponse)(nil),    // 4: questionnaire.getQuestionsResponse
	(*CreateQuestionsRequest)(nil),  // 5: questionnaire.createQuestionsRequest
	(*CreateQuestionsResponse)(nil), // 6: questionnaire.createQuestionsResponse
	(*UpdateQuestionsRequest)(nil),  // 7: questionnaire.updateQuestionsRequest
	(*UpdateQuestionsResponse)(nil), // 8: questionnaire.updateQuestionsResponse
}
var file_Questions_proto_depIdxs = []int32{
	0,  // 0: questionnaire.question.questionYesNo:type_name -> questionnaire.yesno
	1,  // 1: questionnaire.question.questionSecondType:type_name -> questionnaire.secondtype
	2,  // 2: questionnaire.getQuestionsResponse.questionSlice:type_name -> questionnaire.question
	2,  // 3: questionnaire.createQuestionsRequest.cQuestion:type_name -> questionnaire.question
	2,  // 4: questionnaire.createQuestionsResponse.cQuestion:type_name -> questionnaire.question
	2,  // 5: questionnaire.updateQuestionsRequest.cQuestion:type_name -> questionnaire.question
	2,  // 6: questionnaire.updateQuestionsResponse.cQuestion:type_name -> questionnaire.question
	3,  // 7: questionnaire.QuestionService.getQuestions:input_type -> questionnaire.getQuestionsRequest
	5,  // 8: questionnaire.QuestionService.createQuestions:input_type -> questionnaire.createQuestionsRequest
	7,  // 9: questionnaire.QuestionService.updateQuestions:input_type -> questionnaire.updateQuestionsRequest
	4,  // 10: questionnaire.QuestionService.getQuestions:output_type -> questionnaire.getQuestionsResponse
	6,  // 11: questionnaire.QuestionService.createQuestions:output_type -> questionnaire.createQuestionsResponse
	8,  // 12: questionnaire.QuestionService.updateQuestions:output_type -> questionnaire.updateQuestionsResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_Questions_proto_init() }
func file_Questions_proto_init() {
	if File_Questions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Questions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Questions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Questions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Questions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Questions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Questions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Questions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Questions_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Question_QuestionYesNo)(nil),
		(*Question_QuestionSecondType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Questions_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Questions_proto_goTypes,
		DependencyIndexes: file_Questions_proto_depIdxs,
		EnumInfos:         file_Questions_proto_enumTypes,
		MessageInfos:      file_Questions_proto_msgTypes,
	}.Build()
	File_Questions_proto = out.File
	file_Questions_proto_rawDesc = nil
	file_Questions_proto_goTypes = nil
	file_Questions_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QuestionServiceClient interface {
	GetQuestions(ctx context.Context, in *GetQuestionsRequest, opts ...grpc.CallOption) (*GetQuestionsResponse, error)
	CreateQuestions(ctx context.Context, in *CreateQuestionsRequest, opts ...grpc.CallOption) (*CreateQuestionsResponse, error)
	UpdateQuestions(ctx context.Context, in *UpdateQuestionsRequest, opts ...grpc.CallOption) (*UpdateQuestionsResponse, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) GetQuestions(ctx context.Context, in *GetQuestionsRequest, opts ...grpc.CallOption) (*GetQuestionsResponse, error) {
	out := new(GetQuestionsResponse)
	err := c.cc.Invoke(ctx, "/questionnaire.QuestionService/getQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) CreateQuestions(ctx context.Context, in *CreateQuestionsRequest, opts ...grpc.CallOption) (*CreateQuestionsResponse, error) {
	out := new(CreateQuestionsResponse)
	err := c.cc.Invoke(ctx, "/questionnaire.QuestionService/createQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UpdateQuestions(ctx context.Context, in *UpdateQuestionsRequest, opts ...grpc.CallOption) (*UpdateQuestionsResponse, error) {
	out := new(UpdateQuestionsResponse)
	err := c.cc.Invoke(ctx, "/questionnaire.QuestionService/updateQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServiceServer is the server API for QuestionService service.
type QuestionServiceServer interface {
	GetQuestions(context.Context, *GetQuestionsRequest) (*GetQuestionsResponse, error)
	CreateQuestions(context.Context, *CreateQuestionsRequest) (*CreateQuestionsResponse, error)
	UpdateQuestions(context.Context, *UpdateQuestionsRequest) (*UpdateQuestionsResponse, error)
}

// UnimplementedQuestionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQuestionServiceServer struct {
}

func (*UnimplementedQuestionServiceServer) GetQuestions(context.Context, *GetQuestionsRequest) (*GetQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (*UnimplementedQuestionServiceServer) CreateQuestions(context.Context, *CreateQuestionsRequest) (*CreateQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestions not implemented")
}
func (*UnimplementedQuestionServiceServer) UpdateQuestions(context.Context, *UpdateQuestionsRequest) (*UpdateQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestions not implemented")
}

func RegisterQuestionServiceServer(s *grpc.Server, srv QuestionServiceServer) {
	s.RegisterService(&_QuestionService_serviceDesc, srv)
}

func _QuestionService_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionnaire.QuestionService/GetQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetQuestions(ctx, req.(*GetQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_CreateQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionnaire.QuestionService/CreateQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateQuestions(ctx, req.(*CreateQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UpdateQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpdateQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionnaire.QuestionService/UpdateQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpdateQuestions(ctx, req.(*UpdateQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuestionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "questionnaire.QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getQuestions",
			Handler:    _QuestionService_GetQuestions_Handler,
		},
		{
			MethodName: "createQuestions",
			Handler:    _QuestionService_CreateQuestions_Handler,
		},
		{
			MethodName: "updateQuestions",
			Handler:    _QuestionService_UpdateQuestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Questions.proto",
}
